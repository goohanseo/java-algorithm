힙 정렬(Heap Sort)은 힙(Heap) 자료구조를 이용하여 정렬하는 알고리즘입니다. 힙은 완전 이진 트리(Complete Binary Tree)를 기반으로 한 자료구조로, 최대 힙(Max Heap)과 최소 힙(Min Heap)이 있습니다. 최대 힙은 부모 노드의 값이 자식 노드의 값보다 크거나 같고, 최소 힙은 부모 노드의 값이 자식 노드의 값보다 작거나 같은 힙입니다.

힙 정렬은 다음과 같은 단계로 이루어집니다.

1. 주어진 배열을 최대 힙(Max Heap)으로 구성합니다.
2. 배열의 마지막 요소와 루트 요소를 교환합니다.
3. 교환된 요소를 제외한 나머지 배열을 다시 최대 힙으로 구성합니다.
4. 2, 3단계를 배열의 첫 번째 요소까지 반복합니다.

아래는 자바 코드로 구현한 힙 정렬 알고리즘입니다.

```java
public static void heapSort(int[] arr) {
    // 최대 힙을 구성한다.
    buildMaxHeap(arr);

    // 배열의 마지막 요소부터 첫 번째 요소까지 반복한다.
    for (int i = arr.length - 1; i > 0; i--) {
        // 현재 배열의 크기에서 1을 뺀 만큼만 최대 힙 정렬을 반복한다.
        // 최대 힙에서 가장 큰 값(루트 요소)을 배열의 마지막 요소와 교환한다.
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        // 교환된 요소를 제외한 나머지 배열을 다시 최대 힙으로 구성한다.
        maxHeapify(arr, 0, i);
    }
}

private static void buildMaxHeap(int[] arr) {
    // 배열의 중간부터 시작하여 배열 전체를 최대 힙으로 구성한다.
    for (int i = arr.length / 2; i >= 0; i--) {
        maxHeapify(arr, i, arr.length);
    }
}

private static void maxHeapify(int[] arr, int i, int heapSize) {
    // 현재 노드(i)와 자식 노드들의 값을 비교하여 최대 힙 구성한다.
    int leftChild = 2 * i + 1;
    int rightChild = 2 * i + 2;
    int largest = i;

    if (leftChild < heapSize && arr[leftChild] > arr[largest]) {
        largest = leftChild;
    }
    if (rightChild < heapSize && arr[rightChild] > arr[largest]) {
        largest = rightChild;
    }

    if (largest != i) {
        // 현재 노드와 자식 노드를 교환하고,