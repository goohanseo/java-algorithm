{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1EyRyNQIQcMX8MvAVkl9Z2zXRkCmEzHS_","timestamp":1680759105011}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["# Writing `ResNet` from Scratch in PyTorch\n","\n"],"metadata":{"id":"R5dbDkx70lCX"}},{"cell_type":"markdown","source":["이 강좌는 [이 블로그](https://blog.paperspace.com/writing-resnet-from-scratch-in-pytorch/)의 내용을 번역하고 부분적으로 수정한 것이다.\n","\n","Resnet은 Residual Connections의 개념을 도입하여 네트워크가 너무 깊을 경우 네트워크 성능이 저하되는 문제를 해결한 Computer Vision의 주요 혁신중 하나이다.\n","우선 ResNet의 아키텍처와 그 뒤에 숨어있는 직관적인 아이디어를 살펴보는 것으로 시작한다.\n","\n"],"metadata":{"id":"WozRbNY50-1t"}},{"cell_type":"markdown","source":["## Residual Block과 `Resnet`"],"metadata":{"id":"vzXMRHMm2Shi"}},{"cell_type":"markdown","source":["Resnet의 핵심 구성요소는 resudual block이다. 아래 그림이 하나의 residual block을 보여준다."],"metadata":{"id":"r5s_6pGBiuMe"}},{"cell_type":"markdown","source":["\n","\n","<img src=\"https://raw.githubusercontent.com/ohheum/DS2022/7ef336792c0a4ae3044653a7e020818354656b55/assets/image-9.png\" width=\"600\" height=\"360\">\n","\n","\n","\n"],"metadata":{"id":"KlEwVGZz2VkS"}},{"cell_type":"markdown","source":["위의 그림에서 보이듯이 순차적인 연결 외에 모델의 일부 계층을 건너뛰는 연결(skipped connection)이 있다. 건너뛰기 연결이 없을 때 이 모델이 학습해야할 매핑을 `H(x)`라고 한다면 건너뛰기 연결을 추가할 경우 순차 연결 부분이 학습해야할 매핑은 `F(x) = H(x) - x`가 될 것이다. 이 잔여(residual) 매핑  `F(x)`를 학습하는 것이 원래의 매핑 `H(x)`를 학습하는 것보다 쉽다. (극단적인 예로 `H(x)`가 identity mapping이라면 residual mapping F(x)는 zero mapping이다. identity mapping보다는 zero mapping이 학습하기 쉬울 것이다.)\n","\n","아래는 34 레이어 ResNet의 아키텍처입니다."],"metadata":{"id":"JVvyo-S74fwf"}},{"cell_type":"markdown","source":["<img src=\"https://raw.githubusercontent.com/ohheum/DS2022/7ef336792c0a4ae3044653a7e020818354656b55/assets/image-10.png\" width=\"800\" height=\"1800\">"],"metadata":{"id":"tjNFuA564Y4e"}},{"cell_type":"markdown","source":["## Dataset"],"metadata":{"id":"lwXbI5YL4lY1"}},{"cell_type":"markdown","source":["CIFAR-10 데이터 세트를 사용한다. CIFAR-10 데이터 세트는 10개 클래스의 60000개의 32x32 컬러 이미지로 구성되며 클래스당 6000개의 이미지가 있다. 50000개의 훈련 이미지와 10000개의 테스트 이미지가 있다.\n","\n","데이터 세트는 각각 10000개의 이미지가 있는 5개의 훈련 배치와 1개의 테스트 배치로 나뉜다. 테스트 배치에는 각 클래스에서 무작위로 선택된 정확히 1000개의 이미지가 포함된다. 학습 배치에는 나머지 이미지가 무작위 순서로 포함되지만 일부 학습 배치에는 한 클래스의 이미지가 다른 클래스보다 더 많을 수 있다. "],"metadata":{"id":"5UCTxdK34nQm"}},{"cell_type":"markdown","source":["<img src=\"https://pytorch.org/tutorials/_images/cifar10.png\" width=\"600\" height=\"420\">"],"metadata":{"id":"jWr1MnUY4uqu"}},{"cell_type":"markdown","source":["## Importing the Libraries"],"metadata":{"id":"pd1kloIX48Qm"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"3x85MEgYZcvr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680563685449,"user_tz":-540,"elapsed":8373,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"e0ecba8c-3664-403e-c954-5e2a326f726d"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["import numpy as np\n","import torch\n","import torch.nn as nn\n","from torchvision import datasets\n","from torchvision import transforms\n","from torch.utils.data.sampler import SubsetRandomSampler\n","\n","\n","# Device configuration\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"markdown","source":["## Loading the Dataset"],"metadata":{"id":"M-phgx7a5AMU"}},{"cell_type":"markdown","source":["토치비전 라이브러리를 사용하여 데이터 세트를 로드한다."],"metadata":{"id":"xjTM5TIC5DsB"}},{"cell_type":"markdown","source":["* 아래의의 `data_loader` 함수는 트레이닝 데이터와 테스트 데이터에 대한 `DataLoader`를 생성하여 반환한다. \n","* 데이터 세트의 각 채널(빨간색, 녹색 및 파란색)의 평균 및 표준 편차로 정규화를 수행한다.\n","* 데이터 로더를 사용하면 데이터를 일괄적으로 반복할 수 있으며 데이터는 반복하는 동안 로드되며 시작 시 한 번에 모두 RAM에 로드되지는 않는다. 이것은 대규모 데이터 세트를 처리하는 경우 매우 유용하다.\n","* 매개변수 `test=False`인 경우 트레이닝 분할을, `test=True`인 경우 테스트 분할을 로드한다. train의 경우 분할은 무작위로 train과 validation set(0.9:0.1)으로 나뉜다."],"metadata":{"id":"VyT0X42N5OVA"}},{"cell_type":"code","source":["def data_loader(data_dir,\n","                batch_size,\n","                random_seed=42,\n","                valid_size=0.1,\n","                shuffle=True,\n","                test=False):\n","  \n","    normalize = transforms.Normalize(\n","        mean=[0.4914, 0.4822, 0.4465],\n","        std=[0.2023, 0.1994, 0.2010],\n","    )\n","\n","    # define transforms\n","    #이미지 변환 적용 이미지 크기를 224*224 픽셀로 조정, 픽셀 값 pytorch 텐서로 변환,\n","    #미리 계산된 평균과 표준 편차 값을 기반으로 정규화\n","    transform = transforms.Compose([\n","            transforms.Resize((224,224)),\n","            transforms.ToTensor(),\n","            normalize,\n","    ]\n","    #test true일 경우 함수는 cifar10 테스트 세트에 대한 dataloader 생성\n","    #아니면 훈련 및 검증 세트에 대한 dataloader 생성\n","    if test:\n","        dataset = datasets.CIFAR10(\n","          root=data_dir, train=False,\n","          download=True, transform=transform,\n","        )\n","\n","        data_loader = torch.utils.data.DataLoader(\n","            dataset, batch_size=batch_size, shuffle=shuffle\n","        )\n","\n","        return data_loader\n","\n","    # load the dataset\n","    train_dataset = datasets.CIFAR10(\n","        root=data_dir, train=True,\n","        download=True, transform=transform,\n","    )\n","\n","    valid_dataset = datasets.CIFAR10(\n","        root=data_dir, train=True,\n","        download=True, transform=transform,\n","    )\n","\n","    num_train = len(train_dataset)\n","    indices = list(range(num_train))\n","    split = int(np.floor(valid_size * num_train))\n","\n","    if shuffle:\n","        np.random.seed(42)\n","        np.random.shuffle(indices)\n","\n","    train_idx, valid_idx = indices[split:], indices[:split]\n","    train_sampler = SubsetRandomSampler(train_idx)\n","    valid_sampler = SubsetRandomSampler(valid_idx)\n","\n","    train_loader = torch.utils.data.DataLoader(\n","        train_dataset, batch_size=batch_size, sampler=train_sampler)\n"," \n","    valid_loader = torch.utils.data.DataLoader(\n","        valid_dataset, batch_size=batch_size, sampler=valid_sampler)\n","\n","    return (train_loader, valid_loader)\n","\n","\n","# CIFAR10 dataset \n","train_loader, valid_loader = data_loader(data_dir='./data',\n","                                         batch_size=64)\n","\n","test_loader = data_loader(data_dir='./data',\n","                              batch_size=64,\n","                              test=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PfiQ5edcZvVi","executionInfo":{"status":"ok","timestamp":1680563702264,"user_tz":-540,"elapsed":6879,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"120b99d1-976e-4580-c748-2fdf94061639"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 170498071/170498071 [00:02<00:00, 70427352.04it/s] \n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./data/cifar-10-python.tar.gz to ./data\n","Files already downloaded and verified\n","Files already downloaded and verified\n"]}]},{"cell_type":"markdown","source":["네, 맞습니다. Validation set과 Test set은 다릅니다. 머신러닝 프로젝트에서 데이터는 일반적으로 세 가지로 나누어집니다: Training set, Validation set, 그리고 Test set.\n","\n","Training set: 이 데이터셋은 모델을 훈련하는데 사용됩니다. 훈련 과정에서 모델은 입력 데이터와 관련된 가중치를 조정하여 예상되는 출력과 실제 출력 간의 오차를 최소화하려고 합니다.\n","\n","Validation set: 이 데이터셋은 모델의 성능을 검증하는데 사용됩니다. 훈련 과정에서 하이퍼파라미터를 조정하거나, 여러 모델 구조를 비교하여 가장 좋은 성능을 내는 모델을 선택할 때 이 데이터셋이 사용됩니다. 이를 통해 모델이 과적합되지 않고 일반화 성능이 좋은지 확인할 수 있습니다.\n","\n","Test set: 이 데이터셋은 모델의 최종 성능을 평가하는데 사용됩니다. Validation set을 통해 하이퍼파라미터를 조정하고 최적의 모델을 선택한 후, 이 최종 테스트 데이터셋을 사용하여 모델이 실제로 예측할 때 얼마나 잘 수행되는지 확인할 수 있습니다. 테스트 데이터셋은 모델 훈련 및 검증 과정에서 사용되지 않으며, 오직 최종 성능 평가에만 사용됩니다.\n","\n","(0.9:0.1)로 데이터를 나눈다는 것은 전체 데이터의 90%를 훈련 데이터로 사용하고, 10%를 검증 데이터로 사용한다는 의미입니다. 이 경우, 테스트 데이터셋은 별도로 준비되어야 합니다. 이렇게 하면 모델이 과적합되지 않고 일반화 성능이 좋은지 확인할 수 있습니다."],"metadata":{"id":"ZsiI5JJQnDov"}},{"cell_type":"markdown","source":["## How models work in PyTorch"],"metadata":{"id":"Ur-7NAIm5gDW"}},{"cell_type":"markdown","source":[" ResNet에는 PyTorch가 제공하는 다양한 유형의 레이어가 사용된다.\n","\n","* nn.Conv2d: 커널 크기와 함께 입력 및 출력 채널의 수를 인수로 받아들이는 컨볼루션 계층. \n","* nn.BatchNorm2d: 컨볼루션 레이어의 출력에 **배치 정규화**를 적용\n","* nn.ReLU: 네트워크의 다양한 출력에 적용되는 활성화 함수\n","* nn.MaxPool2d : 최대 풀링을 적용\n","* nn.Dropout: 주어진 확률로 출력에 **드롭아웃**을 적용\n","* nn.Linear: 완전히 연결된 레이어\n","* nn.Sequential: 여러 계층을 결합하는데 사용됨"],"metadata":{"id":"q6u8780k5jc2"}},{"cell_type":"markdown","source":["#### 배치정규화(BatchNormalization)"],"metadata":{"id":"VkG929WwMMTq"}},{"cell_type":"markdown","source":["배치 정규화는 레이어의 입력을 다시 중심을 잡고(re-centering) 크기를 조정하여(re-scaling) 정규화함으로써 신경망의 학습을 더 빠르고 안정적으로 만드는 데 사용되는 방법이다. 2015년 Sergey Ioffe와 Christian Szegedy가 [제안](https://arxiv.org/pdf/1502.03167.pdf)하였다.\n","\n","배치 정규화가 효과가 있다는 사실은 비교적 분명하지만, 그 이유는 아직 논의 중이다. 배치 정규화가 각 계층의 파라미터 초기화와 입력 분포 변화가 네트워크의 학습 속도에 영향을 미치는 내부 공변량 이동 문제(internal covariate shift problem)를 완화할 수 있다고 믿어져 왔으나 \n","최근 일부 학자들은 배치 정규화가 내부 공변량 이동을 줄이는 것이 아니라 오히려 목적 함수를 평활화하여(smoothing) 성능을 향상시킨다고 주장하고 있다. \n","\n","> <img src=\"https://raw.github.com/ohheum/DS2022/90abb607bd93581c26f729e51d95cd1fdc6982b9/assets/batch_norm.png\" width=\"600\" height=\"460\">"],"metadata":{"id":"5l-t_MU8NszM"}},{"cell_type":"markdown","source":["#### 드랍아웃(Dropout)"],"metadata":{"id":"KYE6J1R5cfJ9"}},{"cell_type":"markdown","source":["과적합(overfitting)을 줄이기 위한 한 가지 방법은 동일한 데이터셋에 가능한 모든 서로 다른 신경망을 맞추고 각 모델의 예측을 평균하는 것이다. 실제로 이렇게 하는 것은 불가능하며 Dropout은 신경망에서 매 트레이닝 단계마다 일정 비율의 연결을 랜덤하게 drop하여 마치 동시에 서로 다른 여러 개의 네트워크를 트레이닝하는 것과 같은 효과를 기대하는 기법이다. \n","\n","> <img src=\"https://raw.github.com/ohheum/DS2022/1588b3936f3a10fb63a2bb451b6095d74ad21f22/assets/dropout.png\" width=\"600\" height=\"320\">\n"],"metadata":{"id":"1sf3QrNfdiek"}},{"cell_type":"markdown","source":["## Residual Block"],"metadata":{"id":"EqD9C1Qe5s3m"}},{"cell_type":"markdown","source":["먼저 네트워크 전체에서 재사용할 수 있는 `ResidualBlock`을 정의한다. \n","\n","<img src=\"https://raw.githubusercontent.com/ohheum/DS2022/7ef336792c0a4ae3044653a7e020818354656b55/assets/image-9.png\" width=\"600\" height=\"360\">\n"],"metadata":{"id":"OYFue1Gy5vJ2"}},{"cell_type":"code","source":["class ResidualBlock(nn.Module): #전체를 하나의 모듈로 만들어주는 클래스\n","#residual block:입력텐서 x를 받아 배치 정규화와 relue 활성화 적용한 후 두 개의 합성곱 연산 수행\n","#64채널 \n","#in_channel과 out_channel은 첫 번째 합성곱 연산의 입력 및 출력 채널 수를 지정\n","#stride 매개변수는 첫 번째 합성곱 연산의 스트라이드를 지정, 스트라이드는 입력 텐서의 다운샘플링 제어에 사용\n","#downsample은 입력 텐서의 공간 차원이 출력 텐서와 일치하지 않는 경우 다운샘플링에 사용되는 선택적인 1*1 합성곱 연산\n","    def __init__(self, in_channels, out_channels, stride = 1, downsample = None):\n","        super(ResidualBlock, self).__init__()\n","        self.conv1 = nn.Sequential(\n","                        nn.Conv2d(in_channels, out_channels, kernel_size = 3, stride = stride, padding = 1),\n","                        #kernel 1 stride 1 padding 1 사이즈 불변\n","                        nn.BatchNorm2d(out_channels),\n","                        nn.ReLU())\n","        #conv2의 출력은 입력 텐서x에 더해져 residual connection 형성\n","        self.conv2 = nn.Sequential(\n","                        nn.Conv2d(out_channels, out_channels, kernel_size = 3, stride = 1, padding = 1), #stride =1 -> 이 블럭 안에서 맵의 사이즈는 불변\n","                        nn.BatchNorm2d(out_channels))\n","        #선택적으로 1*1 합성곱 연산과 스트라이드사용하여 입력텐서 x를 다운샘플할수 있음\n","        #residual block에서 다운샘플링 수행하는 것은 입력 텐서의 공간 차원을 줄이면서도 입력\n","        #텐서의 채널 수를 변경하지 않고 유지할 수 있다\n","        #resnet 아키텍쳐에서 매우 중요하다. 이전의 딥러닝 아키텍쳐는 pooling 레이어 사용을 공간 크기 줄임\n","        #pooling레이어는 채널 수를 줄이는 단점이 있음\n","        self.downsample = downsample\n","        self.relu = nn.ReLU()\n","        #출력은 relu 활성화 함수를 통해 전달되며 redual block의 출력으로 반환\n","        self.out_channels = out_channels #최종적으로 나가는\n","    #residual block의 순방향 패스 정의\n","    #입력 텐서 x를 받아서 두 개의 합성곱 연산 수행 후 residual connection 형성    \n","    def forward(self, x): #변하지 않음 채널 갯수, 맵의 사이즈 변하지 않음\n","        residual = x\n","        out = self.conv1(x)\n","        out = self.conv2(out)\n","        if self.downsample:\n","            residual = self.downsample(x)\n","        out += residual\n","        out = self.relu(out)\n","        return out"],"metadata":{"id":"8HZ8Tb00ZzCJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Resnet"],"metadata":{"id":"dMABgdVS51t9"}},{"cell_type":"markdown","source":["이제 `ResidualBlock`을 만들었으므로 ResNet을 빌드할 수 있다.\n","\n","아키텍처에는 각각 3, 4, 6, 3개의 레이어를 포함하는 4개의 블록이 있다. 이 블록들을 만들기 위해 도우미 함수 `_make_layer`를 만든다. 마지막으로로 평균 풀링(average pooling)과 최종 선형(linear) 레이어를 추가한다."],"metadata":{"id":"P4rV_1Og53Tu"}},{"cell_type":"code","source":["class ResNet(nn.Module):\n","   #입력 이미지 크기에 맞게 합성공 레이어와 residual block 레이어 구상하고 \n","   #이를 이어서 선형 레이어로 연결하여 최종 출렧 생성\n","    def __init__(self, block, layers, num_classes = 10):\n","        super(ResNet, self).__init__()\n","        #다음 block layer의 입력 채널 수 지정\n","        self.inplanes = 64    # num of input channels of the next residual block\n","        #7*7 커널 크기 사용하여 입력 이미지를 convolution 레이어로 인코딩, \n","        #3*3 커널 크기 사용하여 이미지 다운 샘플링\n","        #각 채널 정규화하기 위해 batch normalization 수행 후 relu 활성화 함수 적용\n","        self.conv1 = nn.Sequential(\n","                        nn.Conv2d(3, 64, kernel_size = 7, stride = 2, padding = 3),\n","                        nn.BatchNorm2d(64),\n","                        nn.ReLU())\n","        #3*3 커널 크기 사용하여 이미지 다운샘플링\n","        self.maxpool = nn.MaxPool2d(kernel_size = 3, stride = 2, padding = 1)\n","        #_make_layer 메서드 사용하여 블록 레이어 생성, \n","        #layers list는 각 residual block 당 블록 수를 저장\n","        #stride 인자는 다운샘플링에 사용되는 스트라이드 나타냄\n","        self.layer0 = self._make_layer(block, 64, layers[0], stride = 1)  \n","        self.layer1 = self._make_layer(block, 128, layers[1], stride = 2)\n","        self.layer2 = self._make_layer(block, 256, layers[2], stride = 2)\n","        self.layer3 = self._make_layer(block, 512, layers[3], stride = 2)\n","        #각 채널마다 특징 맵의 평균값을 계산하여 채널별로 하나의 값을 출력\n","        self.avgpool = nn.AvgPool2d(7, stride=1)\n","        #입력 텐서를 특정 클래스 수에 대한 확률 분포로 변환하는 선형레이어,num_classses 출력 클래스의 수를 지정\n","        self.fc = nn.Linear(512, num_classes)\n","    \n","    #block 클래스, 블록당 채널 수, 블록당 잔차 블록 수, 다운샘플링에 사용되는 스트라이드 값을 사용하여\n","    #residual block layer 생성\n","    def _make_layer(self, block, planes, blocks, stride=1):\n","        downsample = None\n","        #stride가 1이 아니거나 입력 채널 수가 출력 채널 수와 같지 않으면\n","        #downsample은 1*1 컨벌류션 레이어와 배치를 사용하여 생성\n","        if stride != 1 or self.inplanes != planes:\n","            \n","            downsample = nn.Sequential(\n","                nn.Conv2d(self.inplanes, planes, kernel_size=1, stride=stride),\n","                nn.BatchNorm2d(planes),\n","            )\n","        layers = []\n","        layers.append(block(self.inplanes, planes, stride, downsample))\n","        self.inplanes = planes\n","        for i in range(1, blocks):\n","            layers.append(block(self.inplanes, planes))\n","        # 레이어의 모든 잔여 블록을 포함하는 nn.Sequential 개체를 반환\n","        return nn.Sequential(*layers)\n","    \n","    #resnet 모델의 정방향 전달을 수행\n","    def forward(self, x):     # x.shape=(3,224,224)\n","    #입력이미지 x는 convolution, batch normalization 및 relu 활성화 수행하여\n","    #입력 이미지 인코딩하는 self.conv1 레이어 통과\n","        x = self.conv1(x)     # (64, 112, 112)\n","        #최대풀링 수행하여 기능 맵을 다운샘플링\n","        x = self.maxpool(x)   # (64, 56, 56)\n","        #생성된 4개의 잔여 블록 레이어(self.layer0~3) 각각을 통과\n","        x = self.layer0(x)    # (56, 56)\n","        x = self.layer1(x)    # (28, 28)\n","        x = self.layer2(x)    # (14, 14)\n","        x = self.layer3(x)    # (7, 7)\n","        #각 계층은 기능 맵의 공간 해상도를 점진적으로 줄이고 기능 채널 수를 늘림\n","        x = self.avgpool(x)   # (1,1)\n","        x = x.view(x.size(0), -1)   # 512\n","        #평명화된 특성 벡터는 self.fc를 통해 선형 변환을 수행하여 각 클래스의 확률을 나타내는 최종 출려 ㄱ벡터를 생성, 그 다음 출력반환\n","        x = self.fc(x)        \n","\n","        return x"],"metadata":{"id":"msVMW6gxZ4ap"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Setting Hyperparameters"],"metadata":{"id":"bIzlULci582f"}},{"cell_type":"code","source":["#Resnet 모델 교육을 위한 여러 하이퍼파라미터 정의\n","#cifar-10 데이터 세트 출력 클래스 수인 10 설정\n","num_classes = 10\n","#훈련 중 전체 데이터 세트가 모델을 통과하는 횟수인 20설정\n","num_epochs = 20\n","#각 학습 반복에서 사용도리 샘플 수인 16설정\n","batch_size = 16\n","#손실 함수 최소값을 향해 이동하면서 각 반복에서 단계 크기 결정\n","learning_rate = 0.01\n","#resnet 모델 생성\n","#4개의 residual block이 있는 resnet 모델 생성\n","#layer는 각순서대로 3,4,6,3개의 residual block을 포함\n","model = ResNet(ResidualBlock, [3, 4, 6, 3]).to(device) #16 레지듀얼 블럭\n","#매개변수의 수와 각 레이어의 출력 모양을 포함하여 모델 아키텍처의 요약을 인쇄\n","from torchsummary import summary\n","print(summary(model, (3, 224, 224)))\n","\n","# Loss and optimizer\n","#훈련 중 손실을 계산하는데 사용, 학습에 사용되는 옵티마이저는 확률적 옵티마이저 SGD\n","#모델 매개변수, 학습 속도, 가중치 감쇠 및 모멘텀을 인수로 사용\n","criterion = nn.CrossEntropyLoss()\n","optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, weight_decay = 0.001, momentum = 0.9)  \n","\n","# Train the model\n","#훈련 중에 수행될 총 반복 횟수를 결정하는데 사용\n","#train_loader는 학습 샘플 배치를 모델에 제공하는 pytorch 데이터로더\n","total_step = len(train_loader)"],"metadata":{"id":"QqURongpZ6e7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680131701394,"user_tz":-540,"elapsed":11267,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"dc57d407-59a5-40ce-c774-3279718ec405"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1         [-1, 64, 112, 112]           9,472\n","       BatchNorm2d-2         [-1, 64, 112, 112]             128\n","              ReLU-3         [-1, 64, 112, 112]               0\n","         MaxPool2d-4           [-1, 64, 56, 56]               0\n","            Conv2d-5           [-1, 64, 56, 56]          36,928\n","       BatchNorm2d-6           [-1, 64, 56, 56]             128\n","              ReLU-7           [-1, 64, 56, 56]               0\n","            Conv2d-8           [-1, 64, 56, 56]          36,928\n","       BatchNorm2d-9           [-1, 64, 56, 56]             128\n","             ReLU-10           [-1, 64, 56, 56]               0\n","    ResidualBlock-11           [-1, 64, 56, 56]               0\n","           Conv2d-12           [-1, 64, 56, 56]          36,928\n","      BatchNorm2d-13           [-1, 64, 56, 56]             128\n","             ReLU-14           [-1, 64, 56, 56]               0\n","           Conv2d-15           [-1, 64, 56, 56]          36,928\n","      BatchNorm2d-16           [-1, 64, 56, 56]             128\n","             ReLU-17           [-1, 64, 56, 56]               0\n","    ResidualBlock-18           [-1, 64, 56, 56]               0\n","           Conv2d-19           [-1, 64, 56, 56]          36,928\n","      BatchNorm2d-20           [-1, 64, 56, 56]             128\n","             ReLU-21           [-1, 64, 56, 56]               0\n","           Conv2d-22           [-1, 64, 56, 56]          36,928\n","      BatchNorm2d-23           [-1, 64, 56, 56]             128\n","             ReLU-24           [-1, 64, 56, 56]               0\n","    ResidualBlock-25           [-1, 64, 56, 56]               0\n","           Conv2d-26          [-1, 128, 28, 28]          73,856\n","      BatchNorm2d-27          [-1, 128, 28, 28]             256\n","             ReLU-28          [-1, 128, 28, 28]               0\n","           Conv2d-29          [-1, 128, 28, 28]         147,584\n","      BatchNorm2d-30          [-1, 128, 28, 28]             256\n","           Conv2d-31          [-1, 128, 28, 28]           8,320\n","      BatchNorm2d-32          [-1, 128, 28, 28]             256\n","             ReLU-33          [-1, 128, 28, 28]               0\n","    ResidualBlock-34          [-1, 128, 28, 28]               0\n","           Conv2d-35          [-1, 128, 28, 28]         147,584\n","      BatchNorm2d-36          [-1, 128, 28, 28]             256\n","             ReLU-37          [-1, 128, 28, 28]               0\n","           Conv2d-38          [-1, 128, 28, 28]         147,584\n","      BatchNorm2d-39          [-1, 128, 28, 28]             256\n","             ReLU-40          [-1, 128, 28, 28]               0\n","    ResidualBlock-41          [-1, 128, 28, 28]               0\n","           Conv2d-42          [-1, 128, 28, 28]         147,584\n","      BatchNorm2d-43          [-1, 128, 28, 28]             256\n","             ReLU-44          [-1, 128, 28, 28]               0\n","           Conv2d-45          [-1, 128, 28, 28]         147,584\n","      BatchNorm2d-46          [-1, 128, 28, 28]             256\n","             ReLU-47          [-1, 128, 28, 28]               0\n","    ResidualBlock-48          [-1, 128, 28, 28]               0\n","           Conv2d-49          [-1, 128, 28, 28]         147,584\n","      BatchNorm2d-50          [-1, 128, 28, 28]             256\n","             ReLU-51          [-1, 128, 28, 28]               0\n","           Conv2d-52          [-1, 128, 28, 28]         147,584\n","      BatchNorm2d-53          [-1, 128, 28, 28]             256\n","             ReLU-54          [-1, 128, 28, 28]               0\n","    ResidualBlock-55          [-1, 128, 28, 28]               0\n","           Conv2d-56          [-1, 256, 14, 14]         295,168\n","      BatchNorm2d-57          [-1, 256, 14, 14]             512\n","             ReLU-58          [-1, 256, 14, 14]               0\n","           Conv2d-59          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-60          [-1, 256, 14, 14]             512\n","           Conv2d-61          [-1, 256, 14, 14]          33,024\n","      BatchNorm2d-62          [-1, 256, 14, 14]             512\n","             ReLU-63          [-1, 256, 14, 14]               0\n","    ResidualBlock-64          [-1, 256, 14, 14]               0\n","           Conv2d-65          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-66          [-1, 256, 14, 14]             512\n","             ReLU-67          [-1, 256, 14, 14]               0\n","           Conv2d-68          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-69          [-1, 256, 14, 14]             512\n","             ReLU-70          [-1, 256, 14, 14]               0\n","    ResidualBlock-71          [-1, 256, 14, 14]               0\n","           Conv2d-72          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-73          [-1, 256, 14, 14]             512\n","             ReLU-74          [-1, 256, 14, 14]               0\n","           Conv2d-75          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-76          [-1, 256, 14, 14]             512\n","             ReLU-77          [-1, 256, 14, 14]               0\n","    ResidualBlock-78          [-1, 256, 14, 14]               0\n","           Conv2d-79          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-80          [-1, 256, 14, 14]             512\n","             ReLU-81          [-1, 256, 14, 14]               0\n","           Conv2d-82          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-83          [-1, 256, 14, 14]             512\n","             ReLU-84          [-1, 256, 14, 14]               0\n","    ResidualBlock-85          [-1, 256, 14, 14]               0\n","           Conv2d-86          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-87          [-1, 256, 14, 14]             512\n","             ReLU-88          [-1, 256, 14, 14]               0\n","           Conv2d-89          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-90          [-1, 256, 14, 14]             512\n","             ReLU-91          [-1, 256, 14, 14]               0\n","    ResidualBlock-92          [-1, 256, 14, 14]               0\n","           Conv2d-93          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-94          [-1, 256, 14, 14]             512\n","             ReLU-95          [-1, 256, 14, 14]               0\n","           Conv2d-96          [-1, 256, 14, 14]         590,080\n","      BatchNorm2d-97          [-1, 256, 14, 14]             512\n","             ReLU-98          [-1, 256, 14, 14]               0\n","    ResidualBlock-99          [-1, 256, 14, 14]               0\n","          Conv2d-100            [-1, 512, 7, 7]       1,180,160\n","     BatchNorm2d-101            [-1, 512, 7, 7]           1,024\n","            ReLU-102            [-1, 512, 7, 7]               0\n","          Conv2d-103            [-1, 512, 7, 7]       2,359,808\n","     BatchNorm2d-104            [-1, 512, 7, 7]           1,024\n","          Conv2d-105            [-1, 512, 7, 7]         131,584\n","     BatchNorm2d-106            [-1, 512, 7, 7]           1,024\n","            ReLU-107            [-1, 512, 7, 7]               0\n","   ResidualBlock-108            [-1, 512, 7, 7]               0\n","          Conv2d-109            [-1, 512, 7, 7]       2,359,808\n","     BatchNorm2d-110            [-1, 512, 7, 7]           1,024\n","            ReLU-111            [-1, 512, 7, 7]               0\n","          Conv2d-112            [-1, 512, 7, 7]       2,359,808\n","     BatchNorm2d-113            [-1, 512, 7, 7]           1,024\n","            ReLU-114            [-1, 512, 7, 7]               0\n","   ResidualBlock-115            [-1, 512, 7, 7]               0\n","          Conv2d-116            [-1, 512, 7, 7]       2,359,808\n","     BatchNorm2d-117            [-1, 512, 7, 7]           1,024\n","            ReLU-118            [-1, 512, 7, 7]               0\n","          Conv2d-119            [-1, 512, 7, 7]       2,359,808\n","     BatchNorm2d-120            [-1, 512, 7, 7]           1,024\n","            ReLU-121            [-1, 512, 7, 7]               0\n","   ResidualBlock-122            [-1, 512, 7, 7]               0\n","       AvgPool2d-123            [-1, 512, 1, 1]               0\n","          Linear-124                   [-1, 10]           5,130\n","================================================================\n","Total params: 21,298,314\n","Trainable params: 21,298,314\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.57\n","Forward/backward pass size (MB): 96.28\n","Params size (MB): 81.25\n","Estimated Total Size (MB): 178.10\n","----------------------------------------------------------------\n","None\n"]}]},{"cell_type":"markdown","source":["## Training"],"metadata":{"id":"KwfVZC536C8-"}},{"cell_type":"code","source":["#resnet 모델의 교육 및 검증을 수행\n","import gc\n","total_step = len(train_loader)\n","#train_loader는 학습 샘플 배치를 모델에 제공하는 pytorch 데이터 로더\n","for epoch in range(num_epochs):\n","    for i, (images, labels) in enumerate(train_loader):  \n","        # Move tensors to the configured device\n","        images = images.to(device)\n","        labels = labels.to(device)\n","        # Forward pass\n","        # model(images)를 사용하여 이미지 resnet 모델에 전달하여 수행되며 \n","        # 손실은 criterion 사용하여 계산\n","        outputs = model(images)\n","        loss = criterion(outputs, labels)\n","        \n","        # Backward and optimize\n","        #옵티마이저 사용하여 그래디언트 역전파하고 모델 매개볂수 업데이트\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","        #메모리 누수를 방지하기 위해 임시변ㄴ수 imgaes,labels,output 메모리에서 삭제\n","        del images, labels, outputs\n","        #empty_cache, gc.collect 사용하여 gpu 캐시 지워짐\n","        torch.cuda.empty_cache()\n","        gc.collect()\n","\n","    print ('Epoch [{}/{}], Loss: {:.4f}' \n","                   .format(epoch+1, num_epochs, loss.item()))\n","            \n","    # Validation\n","    # 그래디언트가 계산되지 않도록 한다\n","    with torch.no_grad():\n","        correct = 0\n","        total = 0\n","        for images, labels in valid_loader:\n","            images = images.to(device)\n","            labels = labels.to(device)\n","            outputs = model(images)\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","            del images, labels, outputs\n","    \n","        print('Accuracy of the network on the {} validation images: {} %'.format(5000, 100 * correct / total)) \n","#resnet 모델은 valid_loader의 각 유효성 검사 이미지에 대한 레이블을 예측하는데 사용        "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wr-1vzX5Z9XI","executionInfo":{"status":"ok","timestamp":1663058695436,"user_tz":-540,"elapsed":7228919,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"87a0058b-cc94-4173-e291-ca9ee6a5c6a4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [1/20], Loss: 1.7966\n","Accuracy of the network on the 5000 validation images: 58.34 %\n","Epoch [2/20], Loss: 1.1065\n","Accuracy of the network on the 5000 validation images: 73.26 %\n","Epoch [3/20], Loss: 0.8445\n","Accuracy of the network on the 5000 validation images: 77.04 %\n","Epoch [4/20], Loss: 0.4434\n","Accuracy of the network on the 5000 validation images: 76.18 %\n","Epoch [5/20], Loss: 0.7916\n","Accuracy of the network on the 5000 validation images: 80.78 %\n","Epoch [6/20], Loss: 1.1853\n","Accuracy of the network on the 5000 validation images: 79.86 %\n","Epoch [7/20], Loss: 0.5203\n","Accuracy of the network on the 5000 validation images: 82.94 %\n","Epoch [8/20], Loss: 0.4756\n","Accuracy of the network on the 5000 validation images: 83.4 %\n","Epoch [9/20], Loss: 0.8902\n","Accuracy of the network on the 5000 validation images: 82.74 %\n","Epoch [10/20], Loss: 0.6302\n","Accuracy of the network on the 5000 validation images: 83.6 %\n","Epoch [11/20], Loss: 0.0569\n","Accuracy of the network on the 5000 validation images: 84.52 %\n","Epoch [12/20], Loss: 0.7150\n","Accuracy of the network on the 5000 validation images: 83.48 %\n","Epoch [13/20], Loss: 1.1573\n","Accuracy of the network on the 5000 validation images: 83.98 %\n","Epoch [14/20], Loss: 0.1318\n","Accuracy of the network on the 5000 validation images: 83.74 %\n","Epoch [15/20], Loss: 0.7796\n","Accuracy of the network on the 5000 validation images: 83.32 %\n","Epoch [16/20], Loss: 0.1141\n","Accuracy of the network on the 5000 validation images: 83.38 %\n","Epoch [17/20], Loss: 0.3876\n","Accuracy of the network on the 5000 validation images: 84.36 %\n","Epoch [18/20], Loss: 0.1647\n","Accuracy of the network on the 5000 validation images: 83.06 %\n","Epoch [19/20], Loss: 0.5926\n","Accuracy of the network on the 5000 validation images: 83.74 %\n","Epoch [20/20], Loss: 0.4357\n","Accuracy of the network on the 5000 validation images: 83.52 %\n"]}]},{"cell_type":"markdown","source":["코드의 출력을 보면 매 에포크마다 검증(validation) 세트의 정확도가 증가하고 손실이 감소함에 따라 모델이 학습하고 있음을 알 수 있다. "],"metadata":{"id":"6DdUOW0j6QIg"}},{"cell_type":"markdown","source":["## Testing"],"metadata":{"id":"yyaey-7C6WG1"}},{"cell_type":"markdown","source":["테스트를 위해 유효성 검사와 정확히 동일한 코드를 사용하지만 test_loader를 사용한다."],"metadata":{"id":"scU8tvDD6XsU"}},{"cell_type":"code","source":["with torch.no_grad():\n","    correct = 0\n","    total = 0\n","    for images, labels in test_loader:\n","        images = images.to(device)\n","        labels = labels.to(device)\n","        outputs = model(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","        del images, labels, outputs\n","\n","    print('Accuracy of the network on the {} test images: {} %'.format(10000, 100 * correct / total))   "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ve5OoeR6aKx5","executionInfo":{"status":"ok","timestamp":1663058727534,"user_tz":-540,"elapsed":32101,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"465344b4-780f-4b2d-cc66-993fd83328ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of the network on the 10000 test images: 83.93 %\n"]}]},{"cell_type":"markdown","source":["\n","위의 코드를 사용하고 10개의 에포크 동안 모델을 훈련하여 테스트 세트에서 82.87%의 정확도를 달성할 수 있었다."],"metadata":{"id":"2JULaEu1g01L"}},{"cell_type":"markdown","source":["# `torchvision.models.resnet`"],"metadata":{"id":"57cV-Kt8n8cP"}},{"cell_type":"markdown","source":["`torchvision`은 다양한 버전의 트레이닝된 `resnet`을 제공한다. `torchvision`이 제공하는 `resnet`의 목록은 [여기](https://pytorch.org/vision/main/models/resnet.html)에서 확인하라. 이하에서는 그 중에서 가장 작은 규모인 [`resnet18`](https://pytorch.org/vision/main/models/generated/torchvision.models.resnet18.html#torchvision.models.resnet18)을 사용해보자."],"metadata":{"id":"_AKwPp1yoOZ_"}},{"cell_type":"code","source":["from torchvision.models import resnet18\n","resnet18_pretrained = resnet18(pretrained=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"txD0Vn1fn_0W","executionInfo":{"status":"ok","timestamp":1680563711604,"user_tz":-540,"elapsed":637,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"d327cca0-70d8-401f-da0d-50d8b57385ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n","100%|██████████| 44.7M/44.7M [00:00<00:00, 207MB/s]\n"]}]},{"cell_type":"code","source":["# change the output layer to 10 classes\n","num_classes = 10\n","#num_ftrs를 사전 훈련된 resnet18 모델의 원래 완전 연결 계층의 입력 기능 수로 설정\n","#fc 계층은 num_ftrs 입력기능과 num_classes 출력 기능이 있는 새로운 nn.Linear()계층으로 대체\n","#이 새로운 fc레이어는 이제 cifar-10 데이터 세트의 10개 클래스에 대한 점수를 출력\n","num_ftrs = resnet18_pretrained.fc.in_features\n","resnet18_pretrained.fc = nn.Linear(num_ftrs, num_classes)\n","\n","device = torch.device('cuda:0')\n","resnet18_pretrained.to(device)"],"metadata":{"id":"dnP7it8KqXF7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680563721212,"user_tz":-540,"elapsed":5649,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"a44fb4ce-4388-4fe0-d795-e686207ec38e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ResNet(\n","  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (relu): ReLU(inplace=True)\n","  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (layer1): Sequential(\n","    (0): BasicBlock(\n","      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (1): BasicBlock(\n","      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (layer2): Sequential(\n","    (0): BasicBlock(\n","      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): BasicBlock(\n","      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (layer3): Sequential(\n","    (0): BasicBlock(\n","      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): BasicBlock(\n","      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (layer4): Sequential(\n","    (0): BasicBlock(\n","      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): BasicBlock(\n","      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n","  (fc): Linear(in_features=512, out_features=10, bias=True)\n",")"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#사전 훈련된 resnet18 모델의 요약을 인쇄 모델과 데이터 입력 크기라는 두 가지 인수 사용\n","from torchsummary import summary\n","# print(resnet18_pretrained)\n","# 224*224 RGB 이미지 나타냄 요약에는 모델의 레이어, 각 레이어의 출력 모양, 매개변수 수 및 출력 텐서의 크기가 포함된 테이블\n","print(summary(resnet18_pretrained, (3, 224, 224)))"],"metadata":{"id":"Sqg36Qgdpaqq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680563787630,"user_tz":-540,"elapsed":7310,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"5ec5f86e-a66b-415a-f804-1c3c14cd303f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1         [-1, 64, 112, 112]           9,408\n","       BatchNorm2d-2         [-1, 64, 112, 112]             128\n","              ReLU-3         [-1, 64, 112, 112]               0\n","         MaxPool2d-4           [-1, 64, 56, 56]               0\n","            Conv2d-5           [-1, 64, 56, 56]          36,864\n","       BatchNorm2d-6           [-1, 64, 56, 56]             128\n","              ReLU-7           [-1, 64, 56, 56]               0\n","            Conv2d-8           [-1, 64, 56, 56]          36,864\n","       BatchNorm2d-9           [-1, 64, 56, 56]             128\n","             ReLU-10           [-1, 64, 56, 56]               0\n","       BasicBlock-11           [-1, 64, 56, 56]               0\n","           Conv2d-12           [-1, 64, 56, 56]          36,864\n","      BatchNorm2d-13           [-1, 64, 56, 56]             128\n","             ReLU-14           [-1, 64, 56, 56]               0\n","           Conv2d-15           [-1, 64, 56, 56]          36,864\n","      BatchNorm2d-16           [-1, 64, 56, 56]             128\n","             ReLU-17           [-1, 64, 56, 56]               0\n","       BasicBlock-18           [-1, 64, 56, 56]               0\n","           Conv2d-19          [-1, 128, 28, 28]          73,728\n","      BatchNorm2d-20          [-1, 128, 28, 28]             256\n","             ReLU-21          [-1, 128, 28, 28]               0\n","           Conv2d-22          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-23          [-1, 128, 28, 28]             256\n","           Conv2d-24          [-1, 128, 28, 28]           8,192\n","      BatchNorm2d-25          [-1, 128, 28, 28]             256\n","             ReLU-26          [-1, 128, 28, 28]               0\n","       BasicBlock-27          [-1, 128, 28, 28]               0\n","           Conv2d-28          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-29          [-1, 128, 28, 28]             256\n","             ReLU-30          [-1, 128, 28, 28]               0\n","           Conv2d-31          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-32          [-1, 128, 28, 28]             256\n","             ReLU-33          [-1, 128, 28, 28]               0\n","       BasicBlock-34          [-1, 128, 28, 28]               0\n","           Conv2d-35          [-1, 256, 14, 14]         294,912\n","      BatchNorm2d-36          [-1, 256, 14, 14]             512\n","             ReLU-37          [-1, 256, 14, 14]               0\n","           Conv2d-38          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-39          [-1, 256, 14, 14]             512\n","           Conv2d-40          [-1, 256, 14, 14]          32,768\n","      BatchNorm2d-41          [-1, 256, 14, 14]             512\n","             ReLU-42          [-1, 256, 14, 14]               0\n","       BasicBlock-43          [-1, 256, 14, 14]               0\n","           Conv2d-44          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-45          [-1, 256, 14, 14]             512\n","             ReLU-46          [-1, 256, 14, 14]               0\n","           Conv2d-47          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-48          [-1, 256, 14, 14]             512\n","             ReLU-49          [-1, 256, 14, 14]               0\n","       BasicBlock-50          [-1, 256, 14, 14]               0\n","           Conv2d-51            [-1, 512, 7, 7]       1,179,648\n","      BatchNorm2d-52            [-1, 512, 7, 7]           1,024\n","             ReLU-53            [-1, 512, 7, 7]               0\n","           Conv2d-54            [-1, 512, 7, 7]       2,359,296\n","      BatchNorm2d-55            [-1, 512, 7, 7]           1,024\n","           Conv2d-56            [-1, 512, 7, 7]         131,072\n","      BatchNorm2d-57            [-1, 512, 7, 7]           1,024\n","             ReLU-58            [-1, 512, 7, 7]               0\n","       BasicBlock-59            [-1, 512, 7, 7]               0\n","           Conv2d-60            [-1, 512, 7, 7]       2,359,296\n","      BatchNorm2d-61            [-1, 512, 7, 7]           1,024\n","             ReLU-62            [-1, 512, 7, 7]               0\n","           Conv2d-63            [-1, 512, 7, 7]       2,359,296\n","      BatchNorm2d-64            [-1, 512, 7, 7]           1,024\n","             ReLU-65            [-1, 512, 7, 7]               0\n","       BasicBlock-66            [-1, 512, 7, 7]               0\n","AdaptiveAvgPool2d-67            [-1, 512, 1, 1]               0\n","           Linear-68                   [-1, 10]           5,130\n","================================================================\n","Total params: 11,181,642\n","Trainable params: 11,181,642\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.57\n","Forward/backward pass size (MB): 62.79\n","Params size (MB): 42.65\n","Estimated Total Size (MB): 106.01\n","----------------------------------------------------------------\n","None\n"]}]},{"cell_type":"code","source":["#matplotlib 및 torchvision의 'utils' 모듈 사용하여 사전 훈련된 모델의\n","#첫 번째 컨볼루션 계층의 필터를 시각화\n","from torchvision import utils\n","from matplotlib import pyplot as plt\n","\n","# visualize the filters of the first CNN layer\n","#루프는 resnet18 모델의 매개변수를 반복하며 매개변수의 첫 번째 세트는 첫번째 컨볼루션 레이어의 가중치에 해당\n","for w in resnet18_pretrained.parameters():\n","  #가중치 텐서의 모양이 인쇄, 7*7 크기의 3개의 입력 채널이 있는 64개의 필터 (64,2,7,7)\n","    w = w.data.cpu()\n","    print(w.shape)\n","    break\n","\n","# normalize weights\n","# 가중치 정규화\n","min_w = torch.min(w)\n","w1 = (-1/(2 * min_w)) * w + 0.5\n","\n","# make grid to display it\n","grid_size = len(w1)\n","x_grid = [w1[i] for i in range(grid_size)]\n","# 가중치가 그리드로 변환 여러 이미지를 그리드로 연결\n","x_grid = utils.make_grid(x_grid, nrow=8, padding=1)\n","x_grid = x_grid.numpy()\n","\n","#결과 그리드는 matplotlib를 사용하여 플로팅되어 첫 번째 컨볼루션 레이어에 있는 64개 필터 시각화\n","plt.figure(figsize=(8, 8))\n","plt.imshow(np.transpose(x_grid, (1, 2, 0)))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":732},"id":"DbV8S4qtpkSY","executionInfo":{"status":"ok","timestamp":1680563792291,"user_tz":-540,"elapsed":729,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"185e3059-ea94-46cf-e13c-4df989c1e599"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"]},{"output_type":"stream","name":"stdout","text":["torch.Size([64, 3, 7, 7])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#사전 훈련된 resnet18 모델의 정확도를 평가\n","#to 메서드는 모델을 device 변수로 지정된 장치로 이동하는데 사용\n","resnet18_pretrained.to(device)\n","#테스트 세트 반복하고 모델을 각 입력 이미지에 적용\n","#테스트 세트에서 모델을 평가하고 가중치를 업데이트하지 않기를 원하기 때문에 기울기 계싼을 비활성화\n","with torch.no_grad():\n","    correct = 0\n","    total = 0\n","    for images, labels in test_loader:\n","        images = images.to(device)\n","        labels = labels.to(device)\n","        outputs = resnet18_pretrained(images)\n","        #모델의 출력 확률에서 가장 높은 점수를 가진 예측 클래스 레이블 얻는데 사용\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        #올바르게 분류된 테스트 이미지의 총 갯수 correct / 전체는 total\n","        correct += (predicted == labels).sum().item()\n","        del images, labels, outputs\n","\n","    print('Accuracy of the network on the {} test images: {} %'.format(10000, 100 * correct / total))   "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d0lg5axGqkW5","executionInfo":{"status":"ok","timestamp":1680132423037,"user_tz":-540,"elapsed":26436,"user":{"displayName":"권오흠","userId":"05475008821310211864"}},"outputId":"e857b8ce-aad2-412e-a3a9-e44a6b2299bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of the network on the 10000 test images: 9.42 %\n"]}]},{"cell_type":"markdown","source":["우리가 추가한 마지막 레이어는 트레이닝되지 않았음으로 10% 정도의 정답율을 자연스런 것이다. "],"metadata":{"id":"tmw960dusrj2"}}]}